<?php
/**
 * @file
 * Code for the GSB Feature Admission Event Display feature.
 */

include_once 'gsb_feature_admission_event_display.features.inc';

function gsb_feature_admission_event_display_format_date($raw_value, $object) {
  $datetime = new DateTime($raw_value, new DateTimeZone($object->field_event_date[$object->language][0]['timezone_db']));
  $datetime->setTimeZone(new DateTimeZone('America/Los_Angeles'));
  $date = $datetime->format('l, F j, Y');
  return $date;

}

/**
 * Implementation of hook_form_FORM_ID_alter()
 *
 * Provides customizations to the views content type settings form
 */
function gsb_feature_admission_event_display_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  // Remove the default value for upcoming events.
  if (in_array($form_state['subtype_name'], array('admission_events-admission_event_panel_pane'))) {
    $view_modes = $form['view_mode']['#options'];
    foreach($view_modes as $key=>$value) {
      if($key !== 'compact' AND $key !== 'expanded'){
        unset($form['view_mode']['#options'][$key]);
      }
    }
    $conf = $form_state['conf'];
    $form['exposed']['arguments']['#weight'] = 90;
    $form['override_title']['#weight'] = -99;
    $form['items_per_page']['#weight'] = -98;
    $form['view_mode']['#weight'] = -98;
    $form['view_mode']['#title'] = 'Display Option';
    $form['exposed']['#weight'] = -97;
    $form = gsb_misc_fixes_associative_insert($form, 'override_title_text', $item);
    $form['comments']['#access'] = FALSE;
    $form['links']['#access'] = FALSE;
    $form['override_title_heading']['#access'] = FALSE;
    $form['#validate'][] = 'gsb_feature_admission_event_display_form_validate';
    $form['#submit'][] = 'gsb_feature_admission_event_display_form_submit';

    $form['CTA'] = array(
      '#type' => 'fieldset',
      '#title' => t('CTA'),
    );
    $form['CTA']['cta_title'] = array(
      '#title' => t('Text'),
      '#type' => 'textfield',
      '#description' => 'Enter an action statement.',
      '#weight' => 1,
      '#default_value' => !empty($conf['cta_title']) ? $conf['cta_title'] : '',
    );
    $form['CTA']['cta_url'] = array(
      '#title' => t('URL'),
      '#type' => 'textfield',
      '#weight' => 2,
      '#default_value' => !empty($conf['cta_url']) ? $conf['cta_url'] : '',
    );
  }

  if($form_state['subtype_name'] == 'admission_events-location_panel_pane') {
    $filter_ops = $form['exposed']['filter-field_event_date_value']['field_event_date_value_op']['#options'];
    foreach ($filter_ops as $key => $value) {
      if ($key !== '<' AND $key !== '>' AND $key !== 'not empty') {
        unset($form['exposed']['filter-field_event_date_value']['field_event_date_value_op']['#options'][$key]);
      }
      else {
        if ($key == '<') {
          $form['exposed']['filter-field_event_date_value']['field_event_date_value_op']['#options'][$key] = 'Past';
        }
        if ($key == '>') {
          $form['exposed']['filter-field_event_date_value']['field_event_date_value_op']['#options'][$key] = 'Future';
        }
        if ($key == 'not empty') {
          $form['exposed']['filter-field_event_date_value']['field_event_date_value_op']['#options'][$key] = 'All';
        }
      }

    }
    unset($form['exposed']['filter-field_event_date_value']['field_event_date_value']['min']);
    unset($form['exposed']['filter-field_event_date_value']['field_event_date_value']['max']);
    $form['exposed']['filter-field_event_date_value']['field_event_date_value']['value']['#access'] = FALSE;
    $include_option = $form['exposed']['filter-field_address_locality']['field_address_locality_op']['#options'];
    foreach ($include_option as $key => $value) {
      if ($key !== '!=' AND $key !== 'not empty') {
        unset($form['exposed']['filter-field_address_locality']['field_address_locality_op']['#options'][$key]);
      }
      else {
        if ($key == '!=') {
          $form['exposed']['filter-field_address_locality']['field_address_locality_op']['#options'][$key] = 'No';
        }
        if ($key == 'not empty') {
          $form['exposed']['filter-field_address_locality']['field_address_locality_op']['#options'][$key] = 'Yes';
        }
      }
      $form['exposed']['filter-field_address_locality']['field_address_locality']['#default_value'] = 'Stanford';
      $form['exposed']['filter-field_address_locality']['field_address_locality']['#access'] = FALSE;
    }
    // set the required * for the Type field
    $type_title = $form['exposed']['filter-field_program_single_tid']['#title'];
    $form['exposed']['filter-field_program_single_tid']['#title'] = $type_title . ' <span class="form-required" title="' . t('This field is required.') . '">*</span>';
    unset($form['exposed']['filter-field_program_single_tid']['field_program_single_tid']['#options']['All']);
  }
}

/**
 * Implements hook_form_FORM_ID_validate().
 */
function gsb_feature_admission_event_display_form_validate($form, &$form_state) {
  if ($form_state['values']['cta_title'] != '' && $form_state['values']['cta_url'] == '') {
    form_set_error('cta_url', t('CTA Url is required.'));
  }
  if ($form_state['values']['cta_title'] == '' && $form_state['values']['cta_url'] != '') {
    form_set_error('cta_title', t('CTA title is required.'));
  }
}

/**
 * Submit handler for views_content_views_panes_content_type_edit_form.
 *  - Save title link field in pane config.
 */
function gsb_feature_admission_event_display_form_submit($form, &$form_state) {
  $form_state['conf']['cta_url'] = $form_state['values']['cta_url'];
  $form_state['conf']['cta_title'] = $form_state['values']['cta_title'];
}

/**
 * Implements hook_panels_pane_content_alter().
 *  - Alter  Admission event content pane title to be linked to a custom URL.
 */
function gsb_feature_admission_event_display_panels_pane_content_alter($content, $pane, $args, $context) {
  if ($content && $content->subtype == 'admission_events-admission_event_panel_pane') {
    if (!empty($pane->configuration['cta_title'])) {
      $url_parts = drupal_parse_url($pane->configuration['cta_url']);
      $url_parts['html'] = TRUE;
      $content->content['#markup'] .= '<div class="list-cta">' . l($pane->configuration['cta_title'], $url_parts['path'], $url_parts) . '</div>';
    }
  }
}

function gsb_feature_admission_event_display_views_post_render(&$views, &$output) {
  if ($views->name == 'admission_events' && $views->current_display == 'location_panel_pane') {
    $output = str_replace(', United States ','',$output);
    drupal_add_js(drupal_get_path('module', 'gsb_feature_admission_event_display') . '/js/gsb_feature_admission_event_location.js');
  }
}

function gsb_feature_admission_event_display_views_pre_render($view){
  if ($view->name == 'admission_events' && $view->current_display == 'location_panel_pane') {
    $unique_tids = array();
    foreach($view->result AS $k => $result) {
      if (!empty($view->result[$k]->field_field_region[0]['rendered']['#markup'])) {
        if (in_array($result->field_collection_item_field_data_field_event_location__field, $unique_tids) || !$result->field_collection_item_field_data_field_event_location__field) {
          unset($view->result[$k]);
        }
        else {
          $unique_tids[$k] = $result->field_collection_item_field_data_field_event_location__field;
        }
       }
      if ($result->field_collection_item_field_data_field_event_location__field_2 == 'US'){
        $result->field_collection_item_field_data_field_event_location__field_2 = '';
      }
    }
    $alpha_arr = array();
    // cycle each of our unique tids, referencing the original key of the view->result array ($k1
    foreach($unique_tids AS $k => $tid) {
      // we need to grab the term now, not the tid to sort alpha
      $alpha_arr[$k] = strtolower(trim($view->result[$k]->field_field_region[0]['rendered']['#markup']).$view->result[$k]->field_collection_item_field_data_field_event_location__field_2.$view->result[$k]->field_collection_item_field_data_field_event_location__field_1.$view->result[$k]->field_collection_item_field_data_field_event_location__field);
    }
    // sort the array, maintaining the $k key so that we may again reference back to the original data
    asort($alpha_arr);
    // create new array of results to overwrite the current one
    $new_results = array();
    foreach($alpha_arr AS $v => $term_name) {
      $new_results[] = $view->result[$v];
    }
    // get rid of the original result set
    unset($view->result);
    // replace it with our new result set
    $view->result = $new_results;
  }
}


function gsb_feature_admission_event_display_form_views_exposed_form_alter(&$form, &$form_state) {
  $view_list = array("views-exposed-form-admission-events-msx-admission-panel-pane",
                     "views-exposed-form-admission-events-mba-admission-panel-pane");
  if (in_array($form['#id'], $view_list)){
    $form['secondary']['done'] = array(
      '#type' => 'submit',
      '#value' => t('Done'),
    );
    $form['secondary']['clear-all'] = array(
      '#type' => 'button',
      '#value' => t('Clear All'),
    );
    }
}
